{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/jupyterlab-plotly/lib/Figure.js"],"names":["window","PlotlyConfig","MathJaxConfig","semver_range","FigureModel","DOMWidgetModel","defaults","Object","assign","super","_model_name","model_name","_model_module","model_module","_model_module_version","model_module_version","_view_name","view_name","_view_module","view_module","_view_module_version","view_module_version","_data","_layout","_config","_py2js_addTraces","_py2js_deleteTraces","_py2js_moveTraces","_py2js_restyle","_py2js_relayout","_py2js_update","_py2js_animate","_py2js_removeLayoutProps","_py2js_removeTraceProps","_js2py_restyle","_js2py_relayout","_js2py_update","_js2py_layoutDelta","_js2py_traceDeltas","_js2py_pointsCallback","_last_layout_edit_id","_last_trace_edit_id","initialize","apply","this","arguments","on","do_data","do_layout","do_addTraces","do_deleteTraces","do_moveTraces","do_restyle","do_relayout","do_update","do_animate","do_removeLayoutProps","do_removeTraceProps","_normalize_trace_indexes","trace_indexes","undefined","numTraces","get","length","Array","isArray","msgData","currentTraces","newTraces","trace_data","newTrace","push","delete_inds","tracesData","slice","reverse","forEach","del_ind","splice","currentInds","current_trace_inds","newInds","new_trace_inds","performMoveTracesLike","restyleData","restyle_data","restyleTraces","restyle_traces","performRestyleLike","performRelayoutLike","relayout_data","style","style_data","layout","layout_data","styleTraces","style_traces","styles","i","trace_index","trace","keyPaths","remove_props","performRemoveProps","traceIndex","remove_trace","serializers","deserialize","py2js_deserializer","serialize","js2py_serializer","FigureView","DOMWidgetView","perform_render","_a","_b","_c","_d","that","model","MathJax","Hub","Config","call","SVG","font","layout_edit_id","trace_edit_id","viewID","randstr","initialTraces","initialLayout","config","el","then","_sendTraceDeltas","_sendLayoutDelta","update","handle_plotly_restyle","handle_plotly_relayout","handle_plotly_update","handle_plotly_click","handle_plotly_hover","handle_plotly_unhover","handle_plotly_selected","handle_plotly_deselect","handle_plotly_doubleclick","event","CustomEvent","detail","element","document","dispatchEvent","processPhosphorMessage","msg","type","axisHidden","showgrid","showline","tickvals","xaxis","yaxis","addEventListener","autosizeFigure","width","destroy","getFullData","_fullData","data","fullMergeCustomizer","getFullLayout","_fullLayout","buildPointsObject","pointsObject","hasOwnProperty","pointObjects","numPoints","hasNestedPointObjects","numPointNumbers","point_indexes","xs","ys","flatPointIndex","p","single_trace","sort","a","b","hasZ","buildInputDeviceStateObject","inputDeviceState","alt","ctrl","meta","shift","button","buttons","buildSelectorObject","selectorObject","selector_state","xrange","yrange","styleData","restyleMsg","source_view_id","set","touch","relayoutMsg","updateMsg","_send_points_callback_message","points","event_type","pointsMsg","device_state","selector","inds_equal","traceIndexes","relayoutData","animationOpts","animation_opts","animationData","traces","layout_delta","createDeltaObject","layoutDeltaMsg","trace_deltas","fullData","traceInd","traceDeltasMsg","numpy_dtype_to_typedarray_type","int8","Int8Array","int16","Int16Array","int32","Int32Array","uint8","Uint8Array","uint16","Uint16Array","uint32","Uint32Array","float32","Float32Array","float64","Float64Array","serializeTypedArray","v","numpyType","res","dtype","shape","value","buffer","widgetManager","typedarray_type","isTypedArray","potentialTypedArray","ArrayBuffer","isView","DataView","objValue","srcValue","key","parentObj","rawKey","relayoutVal","parentArray","valArray","singleVal","movingTracesData","ci","newIndexSortedArrays","zip","sortBy","unzip","ni","keyPath","fullObj","removeObj","props_equal","fullVal","full_obj","keys","existing","bits","base","_recursion","digits","Math","log","pow","x","Infinity","rem","floor","random","toString","parsed","parseInt","console","warn"],"mappings":"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","file":"8725.ac57ba01160d4788c916.js?v=ac57ba01160d4788c916","sourcesContent":["import { DOMWidgetModel, DOMWidgetView, } from \"@jupyter-widgets/base\";\nimport _ from \"lodash\";\nimport Plotly from \"plotly.js/dist/plotly\";\nimport { MODULE_NAME, MODULE_VERSION } from \"./version\";\n// @ts-ignore\nwindow.PlotlyConfig = { MathJaxConfig: \"local\" };\nconst semver_range = \"^\" + MODULE_VERSION;\n// Model\n// =====\n/**\n * A FigureModel holds a mirror copy of the state of a FigureWidget on\n * the Python side.  There is a one-to-one relationship between JavaScript\n * FigureModels and Python FigureWidgets. The JavaScript FigureModel is\n * initialized as soon as a Python FigureWidget initialized, this happens\n * even before the widget is first displayed in the Notebook\n * @type {widgets.DOMWidgetModel}\n */\nexport class FigureModel extends DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { \n            // Model metadata\n            // --------------\n            _model_name: FigureModel.model_name, _model_module: FigureModel.model_module, _model_module_version: FigureModel.model_module_version, _view_name: FigureModel.view_name, _view_module: FigureModel.view_module, _view_module_version: FigureModel.view_module_version, \n            // Data and Layout\n            // ---------------\n            // The _data and _layout properties are synchronized with the\n            // Python side on initialization only.  After initialization, these\n            // properties are kept in sync through the use of the _py2js_*\n            // messages\n            _data: [], _layout: {}, _config: {}, \n            // Python -> JS messages\n            // ---------------------\n            // Messages are implemented using trait properties. This is done so\n            // that we can take advantage of ipywidget's binary serialization\n            // protocol.\n            //\n            // Messages are sent by the Python side by assigning the message\n            // contents to the appropriate _py2js_* property, and then immediately\n            // setting it to None.  Messages are received by the JavaScript\n            // side by registering property change callbacks in the initialize\n            // methods for FigureModel and FigureView. e.g. (where this is a\n            // FigureModel):\n            //\n            //      this.on('change:_py2js_addTraces', this.do_addTraces, this);\n            //\n            // Message handling methods, do_addTraces, are responsible for\n            // performing the appropriate action if the message contents are\n            // not null\n            /**\n             * @typedef {null|Object} Py2JsAddTracesMsg\n             * @property {Array.<Object>} trace_data\n             *  Array of traces to append to the end of the figure's current traces\n             * @property {Number} trace_edit_id\n             *  Edit ID to use when returning trace deltas using\n             *  the _js2py_traceDeltas message.\n             * @property {Number} layout_edit_id\n             *  Edit ID to use when returning layout deltas using\n             *  the _js2py_layoutDelta message.\n             */\n            _py2js_addTraces: null, \n            /**\n             * @typedef {null|Object} Py2JsDeleteTracesMsg\n             * @property {Array.<Number>} delete_inds\n             *  Array of indexes of traces to be deleted, in ascending order\n             * @property {Number} trace_edit_id\n             *  Edit ID to use when returning trace deltas using\n             *  the _js2py_traceDeltas message.\n             * @property {Number} layout_edit_id\n             *  Edit ID to use when returning layout deltas using\n             *  the _js2py_layoutDelta message.\n             */\n            _py2js_deleteTraces: null, \n            /**\n             * @typedef {null|Object} Py2JsMoveTracesMsg\n             * @property {Array.<Number>} current_trace_inds\n             *  Array of the current indexes of traces to be moved\n             * @property {Array.<Number>} new_trace_inds\n             *  Array of the new indexes that traces should be moved to.\n             */\n            _py2js_moveTraces: null, \n            /**\n             * @typedef {null|Object} Py2JsRestyleMsg\n             * @property {Object} restyle_data\n             *  Restyle data as accepted by Plotly.restyle\n             * @property {null|Array.<Number>} restyle_traces\n             *  Array of indexes of the traces that the resytle operation applies\n             *  to, or null to apply the operation to all traces\n             * @property {Number} trace_edit_id\n             *  Edit ID to use when returning trace deltas using\n             *  the _js2py_traceDeltas message\n             * @property {Number} layout_edit_id\n             *  Edit ID to use when returning layout deltas using\n             *  the _js2py_layoutDelta message\n             * @property {null|String} source_view_id\n             *  view_id of the FigureView that triggered the original restyle\n             *  event (e.g. by clicking the legend), or null if the restyle was\n             *  triggered from Python\n             */\n            _py2js_restyle: null, \n            /**\n             * @typedef {null|Object} Py2JsRelayoutMsg\n             * @property {Object} relayout_data\n             *  Relayout data as accepted by Plotly.relayout\n             * @property {Number} layout_edit_id\n             *  Edit ID to use when returning layout deltas using\n             *  the _js2py_layoutDelta message\n             * @property {null|String} source_view_id\n             *  view_id of the FigureView that triggered the original relayout\n             *  event (e.g. by clicking the zoom button), or null if the\n             *  relayout was triggered from Python\n             */\n            _py2js_relayout: null, \n            /**\n             * @typedef {null|Object} Py2JsUpdateMsg\n             * @property {Object} style_data\n             *  Style data as accepted by Plotly.update\n             * @property {Object} layout_data\n             *  Layout data as accepted by Plotly.update\n             * @property {Array.<Number>} style_traces\n             *  Array of indexes of the traces that the update operation applies\n             *  to, or null to apply the operation to all traces\n             * @property {Number} trace_edit_id\n             *  Edit ID to use when returning trace deltas using\n             *  the _js2py_traceDeltas message\n             * @property {Number} layout_edit_id\n             *  Edit ID to use when returning layout deltas using\n             *  the _js2py_layoutDelta message\n             * @property {null|String} source_view_id\n             *  view_id of the FigureView that triggered the original update\n             *  event (e.g. by clicking a button), or null if the update was\n             *  triggered from Python\n             */\n            _py2js_update: null, \n            /**\n             * @typedef {null|Object} Py2JsAnimateMsg\n             * @property {Object} style_data\n             *  Style data as accepted by Plotly.animate\n             * @property {Object} layout_data\n             *  Layout data as accepted by Plotly.animate\n             * @property {Array.<Number>} style_traces\n             *  Array of indexes of the traces that the animate operation applies\n             *  to, or null to apply the operation to all traces\n             * @property {Object} animation_opts\n             *  Animation options as accepted by Plotly.animate\n             * @property {Number} trace_edit_id\n             *  Edit ID to use when returning trace deltas using\n             *  the _js2py_traceDeltas message\n             * @property {Number} layout_edit_id\n             *  Edit ID to use when returning layout deltas using\n             *  the _js2py_layoutDelta message\n             * @property {null|String} source_view_id\n             *  view_id of the FigureView that triggered the original animate\n             *  event (e.g. by clicking a button), or null if the update was\n             *  triggered from Python\n             */\n            _py2js_animate: null, \n            /**\n             * @typedef {null|Object} Py2JsRemoveLayoutPropsMsg\n             * @property {Array.<Array.<String|Number>>} remove_props\n             *  Array of property paths to remove. Each propery path is an\n             *  array of property names or array indexes that locate a property\n             *  inside the _layout object\n             */\n            _py2js_removeLayoutProps: null, \n            /**\n             * @typedef {null|Object} Py2JsRemoveTracePropsMsg\n             * @property {Number} remove_trace\n             *  The index of the trace from which to remove properties\n             * @property {Array.<Array.<String|Number>>} remove_props\n             *  Array of property paths to remove. Each propery path is an\n             *  array of property names or array indexes that locate a property\n             *  inside the _data[remove_trace] object\n             */\n            _py2js_removeTraceProps: null, \n            // JS -> Python messages\n            // ---------------------\n            // Messages are sent by the JavaScript side by assigning the\n            // message contents to the appropriate _js2py_* property and then\n            // calling the `touch` method on the view that triggered the\n            // change. e.g. (where this is a FigureView):\n            //\n            //      this.model.set('_js2py_restyle', data);\n            //      this.touch();\n            //\n            // The Python side is responsible for setting the property to None\n            // after receiving the message.\n            //\n            // Message trigger logic is described in the corresponding\n            // handle_plotly_* methods of FigureView\n            /**\n             * @typedef {null|Object} Js2PyRestyleMsg\n             * @property {Object} style_data\n             *  Style data that was passed to Plotly.restyle\n             * @property {Array.<Number>} style_traces\n             *  Array of indexes of the traces that the restyle operation\n             *  was applied to, or null if applied to all traces\n             * @property {String} source_view_id\n             *  view_id of the FigureView that triggered the original restyle\n             *  event (e.g. by clicking the legend)\n             */\n            _js2py_restyle: null, \n            /**\n             * @typedef {null|Object} Js2PyRelayoutMsg\n             * @property {Object} relayout_data\n             *  Relayout data that was passed to Plotly.relayout\n             * @property {String} source_view_id\n             *  view_id of the FigureView that triggered the original relayout\n             *  event (e.g. by clicking the zoom button)\n             */\n            _js2py_relayout: null, \n            /**\n             * @typedef {null|Object} Js2PyUpdateMsg\n             * @property {Object} style_data\n             *  Style data that was passed to Plotly.update\n             * @property {Object} layout_data\n             *  Layout data that was passed to Plotly.update\n             * @property {Array.<Number>} style_traces\n             *  Array of indexes of the traces that the update operation applied\n             *  to, or null if applied to all traces\n             * @property {String} source_view_id\n             *  view_id of the FigureView that triggered the original relayout\n             *  event (e.g. by clicking the zoom button)\n             */\n            _js2py_update: null, \n            /**\n             * @typedef {null|Object} Js2PyLayoutDeltaMsg\n             * @property {Object} layout_delta\n             *  The layout delta object that contains all of the properties of\n             *  _fullLayout that are not identical to those in the\n             *  FigureModel's _layout property\n             * @property {Number} layout_edit_id\n             *  Edit ID of message that triggered the creation of layout delta\n             */\n            _js2py_layoutDelta: null, \n            /**\n             * @typedef {null|Object} Js2PyTraceDeltasMsg\n             * @property {Array.<Object>} trace_deltas\n             *  Array of trace delta objects. Each trace delta contains the\n             *  trace's uid along with all of the properties of _fullData that\n             *  are not identical to those in the FigureModel's _data property\n             * @property {Number} trace_edit_id\n             *  Edit ID of message that triggered the creation of trace deltas\n             */\n            _js2py_traceDeltas: null, \n            /**\n             * Object representing a collection of points for use in click, hover,\n             * and selection events\n             * @typedef {Object} Points\n             * @property {Array.<Number>} trace_indexes\n             *  Array of the trace index for each point\n             * @property {Array.<Number>} point_indexes\n             *  Array of the index of each point in its own trace\n             * @property {null|Array.<Number>} xs\n             *  Array of the x coordinate of each point (for cartesian trace types)\n             *  or null (for non-cartesian trace types)\n             * @property {null|Array.<Number>} ys\n             *  Array of the y coordinate of each point (for cartesian trace types)\n             *  or null (for non-cartesian trace types\n             * @property {null|Array.<Number>} zs\n             *  Array of the z coordinate of each point (for 3D cartesian\n             *  trace types)\n             *  or null (for non-3D-cartesian trace types)\n             */\n            /**\n             * Object representing the state of the input devices during a\n             * plotly event\n             * @typedef {Object} InputDeviceState\n             * @property {boolean} alt - true if alt key pressed,\n             * false otherwise\n             * @property {boolean} ctrl - true if ctrl key pressed,\n             * false otherwise\n             * @property {boolean} meta - true if meta key pressed,\n             * false otherwise\n             * @property {boolean} shift - true if shift key pressed,\n             * false otherwise\n             *\n             * @property {boolean} button\n             *  Indicates which button was pressed on the mouse to trigger the\n             *  event.\n             *    0: Main button pressed, usually the left button or the\n             *       un-initialized state\n             *    1: Auxiliary button pressed, usually the wheel button or\n             *       the middle button (if present)\n             *    2: Secondary button pressed, usually the right button\n             *    3: Fourth button, typically the Browser Back button\n             *    4: Fifth button, typically the Browser Forward button\n             *\n             * @property {boolean} buttons\n             *  Indicates which buttons were pressed on the mouse when the event\n             *  is triggered.\n             *    0  : No button or un-initialized\n             *    1  : Primary button (usually left)\n             *    2  : Secondary button (usually right)\n             *    4  : Auxilary button (usually middle or mouse wheel button)\n             *    8  : 4th button (typically the \"Browser Back\" button)\n             *    16 : 5th button (typically the \"Browser Forward\" button)\n             *\n             *  Combinations of buttons are represented by the sum of the codes\n             *  above. e.g. a value of 7 indicates buttons 1 (primary),\n             *  2 (secondary), and 4 (auxilary) were pressed during the event\n             */\n            /**\n             * @typedef {Object} BoxSelectorState\n             * @property {Array.<Number>} xrange\n             *  Two element array containing the x-range of the box selection\n             * @property {Array.<Number>} yrange\n             *  Two element array containing the y-range of the box selection\n             */\n            /**\n             * @typedef {Object} LassoSelectorState\n             * @property {Array.<Number>} xs\n             *  Array of the x-coordinates of the lasso selection region\n             * @property {Array.<Number>} ys\n             *  Array of the y-coordinates of the lasso selection region\n             */\n            /**\n             * Object representing the state of the selection tool during a\n             * plotly_select event\n             * @typedef {Object} Selector\n             * @property {String} type\n             *  Selection type. One of: 'box', or 'lasso'\n             * @property {BoxSelectorState|LassoSelectorState} selector_state\n             */\n            /**\n             * @typedef {null|Object} Js2PyPointsCallbackMsg\n             * @property {string} event_type\n             *  Name of the triggering event. One of 'plotly_click',\n             *  'plotly_hover', 'plotly_unhover', or 'plotly_selected'\n             * @property {null|Points} points\n             *  Points object for event\n             * @property {null|InputDeviceState} device_state\n             *  InputDeviceState object for event\n             * @property {null|Selector} selector\n             *  State of the selection tool for 'plotly_selected' events, null\n             *  for other event types\n             */\n            _js2py_pointsCallback: null, \n            // Message tracking\n            // ----------------\n            /**\n             * @type {Number}\n             * layout_edit_id of the last layout modification operation\n             * requested by the Python side\n             */\n            _last_layout_edit_id: 0, \n            /**\n             * @type {Number}\n             * trace_edit_id of the last trace modification operation\n             * requested by the Python side\n             */\n            _last_trace_edit_id: 0 });\n    }\n    /**\n     * Initialize FigureModel. Called when the Python FigureWidget is first\n     * constructed\n     */\n    initialize() {\n        super.initialize.apply(this, arguments);\n        this.on(\"change:_data\", this.do_data, this);\n        this.on(\"change:_layout\", this.do_layout, this);\n        this.on(\"change:_py2js_addTraces\", this.do_addTraces, this);\n        this.on(\"change:_py2js_deleteTraces\", this.do_deleteTraces, this);\n        this.on(\"change:_py2js_moveTraces\", this.do_moveTraces, this);\n        this.on(\"change:_py2js_restyle\", this.do_restyle, this);\n        this.on(\"change:_py2js_relayout\", this.do_relayout, this);\n        this.on(\"change:_py2js_update\", this.do_update, this);\n        this.on(\"change:_py2js_animate\", this.do_animate, this);\n        this.on(\"change:_py2js_removeLayoutProps\", this.do_removeLayoutProps, this);\n        this.on(\"change:_py2js_removeTraceProps\", this.do_removeTraceProps, this);\n    }\n    /**\n     * Input a trace index specification and return an Array of trace\n     * indexes where:\n     *\n     *  - null|undefined -> Array of all traces\n     *  - Trace index as Number -> Single element array of input index\n     *  - Array of trace indexes -> Input array unchanged\n     *\n     * @param {undefined|null|Number|Array.<Number>} trace_indexes\n     * @returns {Array.<Number>}\n     *  Array of trace indexes\n     * @private\n     */\n    _normalize_trace_indexes(trace_indexes) {\n        if (trace_indexes === null || trace_indexes === undefined) {\n            var numTraces = this.get(\"_data\").length;\n            trace_indexes = _.range(numTraces);\n        }\n        if (!Array.isArray(trace_indexes)) {\n            // Make sure idx is an array\n            trace_indexes = [trace_indexes];\n        }\n        return trace_indexes;\n    }\n    /**\n     * Log changes to the _data trait\n     *\n     * This should only happed on FigureModel initialization\n     */\n    do_data() { }\n    /**\n     * Log changes to the _layout trait\n     *\n     * This should only happed on FigureModel initialization\n     */\n    do_layout() { }\n    /**\n     * Handle addTraces message\n     */\n    do_addTraces() {\n        // add trace to plot\n        /** @type {Py2JsAddTracesMsg} */\n        var msgData = this.get(\"_py2js_addTraces\");\n        if (msgData !== null) {\n            var currentTraces = this.get(\"_data\");\n            var newTraces = msgData.trace_data;\n            _.forEach(newTraces, function (newTrace) {\n                currentTraces.push(newTrace);\n            });\n        }\n    }\n    /**\n     * Handle deleteTraces message\n     */\n    do_deleteTraces() {\n        // remove traces from plot\n        /** @type {Py2JsDeleteTracesMsg} */\n        var msgData = this.get(\"_py2js_deleteTraces\");\n        if (msgData !== null) {\n            var delete_inds = msgData.delete_inds;\n            var tracesData = this.get(\"_data\");\n            // Remove del inds in reverse order so indexes remain valid\n            // throughout loop\n            delete_inds\n                .slice()\n                .reverse()\n                .forEach(function (del_ind) {\n                tracesData.splice(del_ind, 1);\n            });\n        }\n    }\n    /**\n     * Handle moveTraces message\n     */\n    do_moveTraces() {\n        /** @type {Py2JsMoveTracesMsg} */\n        var msgData = this.get(\"_py2js_moveTraces\");\n        if (msgData !== null) {\n            var tracesData = this.get(\"_data\");\n            var currentInds = msgData.current_trace_inds;\n            var newInds = msgData.new_trace_inds;\n            performMoveTracesLike(tracesData, currentInds, newInds);\n        }\n    }\n    /**\n     * Handle restyle message\n     */\n    do_restyle() {\n        /** @type {Py2JsRestyleMsg} */\n        var msgData = this.get(\"_py2js_restyle\");\n        if (msgData !== null) {\n            var restyleData = msgData.restyle_data;\n            var restyleTraces = this._normalize_trace_indexes(msgData.restyle_traces);\n            performRestyleLike(this.get(\"_data\"), restyleData, restyleTraces);\n        }\n    }\n    /**\n     * Handle relayout message\n     */\n    do_relayout() {\n        /** @type {Py2JsRelayoutMsg} */\n        var msgData = this.get(\"_py2js_relayout\");\n        if (msgData !== null) {\n            performRelayoutLike(this.get(\"_layout\"), msgData.relayout_data);\n        }\n    }\n    /**\n     * Handle update message\n     */\n    do_update() {\n        /** @type {Py2JsUpdateMsg} */\n        var msgData = this.get(\"_py2js_update\");\n        if (msgData !== null) {\n            var style = msgData.style_data;\n            var layout = msgData.layout_data;\n            var styleTraces = this._normalize_trace_indexes(msgData.style_traces);\n            performRestyleLike(this.get(\"_data\"), style, styleTraces);\n            performRelayoutLike(this.get(\"_layout\"), layout);\n        }\n    }\n    /**\n     * Handle animate message\n     */\n    do_animate() {\n        /** @type {Py2JsAnimateMsg} */\n        var msgData = this.get(\"_py2js_animate\");\n        if (msgData !== null) {\n            var styles = msgData.style_data;\n            var layout = msgData.layout_data;\n            var trace_indexes = this._normalize_trace_indexes(msgData.style_traces);\n            for (var i = 0; i < styles.length; i++) {\n                var style = styles[i];\n                var trace_index = trace_indexes[i];\n                var trace = this.get(\"_data\")[trace_index];\n                performRelayoutLike(trace, style);\n            }\n            performRelayoutLike(this.get(\"_layout\"), layout);\n        }\n    }\n    /**\n     * Handle removeLayoutProps message\n     */\n    do_removeLayoutProps() {\n        /** @type {Py2JsRemoveLayoutPropsMsg} */\n        var msgData = this.get(\"_py2js_removeLayoutProps\");\n        if (msgData !== null) {\n            var keyPaths = msgData.remove_props;\n            var layout = this.get(\"_layout\");\n            performRemoveProps(layout, keyPaths);\n        }\n    }\n    /**\n     * Handle removeTraceProps message\n     */\n    do_removeTraceProps() {\n        /** @type {Py2JsRemoveTracePropsMsg} */\n        var msgData = this.get(\"_py2js_removeTraceProps\");\n        if (msgData !== null) {\n            var keyPaths = msgData.remove_props;\n            var traceIndex = msgData.remove_trace;\n            var trace = this.get(\"_data\")[traceIndex];\n            performRemoveProps(trace, keyPaths);\n        }\n    }\n}\nFigureModel.serializers = Object.assign(Object.assign({}, DOMWidgetModel.serializers), { _data: { deserialize: py2js_deserializer, serialize: js2py_serializer }, _layout: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_addTraces: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_deleteTraces: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_moveTraces: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_restyle: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_relayout: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_update: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_animate: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_removeLayoutProps: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _py2js_removeTraceProps: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _js2py_restyle: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _js2py_relayout: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _js2py_update: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _js2py_layoutDelta: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _js2py_traceDeltas: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    }, _js2py_pointsCallback: {\n        deserialize: py2js_deserializer,\n        serialize: js2py_serializer,\n    } });\nFigureModel.model_name = \"FigureModel\";\nFigureModel.model_module = MODULE_NAME;\nFigureModel.model_module_version = semver_range;\nFigureModel.view_name = \"FigureView\";\nFigureModel.view_module = MODULE_NAME;\nFigureModel.view_module_version = semver_range;\n// View\n// ====\n/**\n * A FigureView manages the visual presentation of a single Plotly.js\n * figure for a single notebook output cell. Each FigureView has a\n * reference to FigureModel.  Multiple views may share a single model\n * instance, as is the case when a Python FigureWidget is displayed in\n * multiple notebook output cells.\n *\n * @type {widgets.DOMWidgetView}\n */\nexport class FigureView extends DOMWidgetView {\n    /**\n     * The perform_render method is called by processPhosphorMessage\n     * after the widget's DOM element has been attached to the notebook\n     * output cell. This happens after the initialize of the\n     * FigureModel, and it won't happen at all if the Python FigureWidget\n     * is never displayed in a notebook output cell\n     */\n    perform_render() {\n        var _a, _b, _c, _d;\n        var that = this;\n        // Wire up message property callbacks\n        // ----------------------------------\n        // Python -> JS event properties\n        this.model.on(\"change:_py2js_addTraces\", this.do_addTraces, this);\n        this.model.on(\"change:_py2js_deleteTraces\", this.do_deleteTraces, this);\n        this.model.on(\"change:_py2js_moveTraces\", this.do_moveTraces, this);\n        this.model.on(\"change:_py2js_restyle\", this.do_restyle, this);\n        this.model.on(\"change:_py2js_relayout\", this.do_relayout, this);\n        this.model.on(\"change:_py2js_update\", this.do_update, this);\n        this.model.on(\"change:_py2js_animate\", this.do_animate, this);\n        // MathJax v2 configuration\n        // ---------------------\n        (_d = (_c = (_b = (_a = window) === null || _a === void 0 ? void 0 : _a.MathJax) === null || _b === void 0 ? void 0 : _b.Hub) === null || _c === void 0 ? void 0 : _c.Config) === null || _d === void 0 ? void 0 : _d.call(_c, { SVG: { font: \"STIX-Web\" } });\n        // Get message ids\n        // ---------------------\n        var layout_edit_id = this.model.get(\"_last_layout_edit_id\");\n        var trace_edit_id = this.model.get(\"_last_trace_edit_id\");\n        // Set view UID\n        // ------------\n        this.viewID = randstr();\n        // Initialize Plotly.js figure\n        // ---------------------------\n        // We must clone the model's data and layout properties so that\n        // the model is not directly mutated by the Plotly.js library.\n        var initialTraces = _.cloneDeep(this.model.get(\"_data\"));\n        var initialLayout = _.cloneDeep(this.model.get(\"_layout\"));\n        var config = this.model.get(\"_config\");\n        Plotly.newPlot(that.el, initialTraces, initialLayout, config).then(function () {\n            // ### Send trace deltas ###\n            // We create an array of deltas corresponding to the new\n            // traces.\n            that._sendTraceDeltas(trace_edit_id);\n            // ### Send layout delta ###\n            that._sendLayoutDelta(layout_edit_id);\n            // Wire up plotly event callbacks\n            that.el.on(\"plotly_restyle\", function (update) {\n                that.handle_plotly_restyle(update);\n            });\n            that.el.on(\"plotly_relayout\", function (update) {\n                that.handle_plotly_relayout(update);\n            });\n            that.el.on(\"plotly_update\", function (update) {\n                that.handle_plotly_update(update);\n            });\n            that.el.on(\"plotly_click\", function (update) {\n                that.handle_plotly_click(update);\n            });\n            that.el.on(\"plotly_hover\", function (update) {\n                that.handle_plotly_hover(update);\n            });\n            that.el.on(\"plotly_unhover\", function (update) {\n                that.handle_plotly_unhover(update);\n            });\n            that.el.on(\"plotly_selected\", function (update) {\n                that.handle_plotly_selected(update);\n            });\n            that.el.on(\"plotly_deselect\", function (update) {\n                that.handle_plotly_deselect(update);\n            });\n            that.el.on(\"plotly_doubleclick\", function (update) {\n                that.handle_plotly_doubleclick(update);\n            });\n            // Emit event indicating that the widget has finished\n            // rendering\n            var event = new CustomEvent(\"plotlywidget-after-render\", {\n                detail: { element: that.el, viewID: that.viewID },\n            });\n            // Dispatch/Trigger/Fire the event\n            document.dispatchEvent(event);\n        });\n    }\n    /**\n     * Respond to phosphorjs events\n     */\n    processPhosphorMessage(msg) {\n        super.processPhosphorMessage.apply(this, arguments);\n        var that = this;\n        switch (msg.type) {\n            case \"before-attach\":\n                // Render an initial empty figure. This establishes with\n                // the page that the element will not be empty, avoiding\n                // some occasions where the dynamic sizing behavior leads\n                // to collapsed figure dimensions.\n                var axisHidden = {\n                    showgrid: false,\n                    showline: false,\n                    tickvals: [],\n                };\n                Plotly.newPlot(that.el, [], {\n                    xaxis: axisHidden,\n                    yaxis: axisHidden,\n                });\n                window.addEventListener(\"resize\", function () {\n                    that.autosizeFigure();\n                });\n                break;\n            case \"after-attach\":\n                // Rendering actual figure in the after-attach event allows\n                // Plotly.js to size the figure to fill the available element\n                this.perform_render();\n                break;\n            case \"after-show\":\n            case \"resize\":\n                this.autosizeFigure();\n                break;\n        }\n    }\n    autosizeFigure() {\n        var that = this;\n        var layout = that.model.get(\"_layout\");\n        if (_.isNil(layout) || _.isNil(layout.width)) {\n            // @ts-ignore\n            Plotly.Plots.resize(that.el).then(function () {\n                var layout_edit_id = that.model.get(\"_last_layout_edit_id\");\n                that._sendLayoutDelta(layout_edit_id);\n            });\n        }\n    }\n    /**\n     * Purge Plotly.js data structures from the notebook output display\n     * element when the view is destroyed\n     */\n    destroy() {\n        Plotly.purge(this.el);\n    }\n    /**\n     * Return the figure's _fullData array merged with its data array\n     *\n     * The merge ensures that for any properties that el._fullData and\n     * el.data have in common, we return the version from el.data\n     *\n     * Named colorscales are one example of why this is needed. The el.data\n     * array will hold named colorscale strings (e.g. 'Viridis'), while the\n     * el._fullData array will hold the actual colorscale array. e.g.\n     *\n     *      el.data[0].marker.colorscale == 'Viridis' but\n     *      el._fullData[0].marker.colorscale = [[..., ...], ...]\n     *\n     * Performing the merge allows our FigureModel to retain the 'Viridis'\n     * string, rather than having it overridded by the colorscale array.\n     *\n     */\n    getFullData() {\n        return _.mergeWith({}, this.el._fullData, this.el.data, fullMergeCustomizer);\n    }\n    /**\n     * Return the figure's _fullLayout object merged with its layout object\n     *\n     * See getFullData documentation for discussion of why the merge is\n     * necessary\n     */\n    getFullLayout() {\n        return _.mergeWith({}, this.el._fullLayout, this.el.layout, fullMergeCustomizer);\n    }\n    /**\n     * Build Points data structure from data supplied by the plotly_click,\n     * plotly_hover, or plotly_select events\n     * @param {Object} data\n     * @returns {null|Points}\n     */\n    buildPointsObject(data) {\n        var pointsObject;\n        if (data.hasOwnProperty(\"points\")) {\n            // Most cartesian plots\n            var pointObjects = data[\"points\"];\n            var numPoints = pointObjects.length;\n            var hasNestedPointObjects = true;\n            for (let i = 0; i < numPoints; i++) {\n                hasNestedPointObjects =\n                    hasNestedPointObjects &&\n                        pointObjects[i].hasOwnProperty(\"pointNumbers\");\n                if (!hasNestedPointObjects)\n                    break;\n            }\n            var numPointNumbers = numPoints;\n            if (hasNestedPointObjects) {\n                numPointNumbers = 0;\n                for (let i = 0; i < numPoints; i++) {\n                    numPointNumbers += pointObjects[i][\"pointNumbers\"].length;\n                }\n            }\n            pointsObject = {\n                trace_indexes: new Array(numPointNumbers),\n                point_indexes: new Array(numPointNumbers),\n                xs: new Array(numPointNumbers),\n                ys: new Array(numPointNumbers),\n            };\n            if (hasNestedPointObjects) {\n                var flatPointIndex = 0;\n                for (var p = 0; p < numPoints; p++) {\n                    for (let i = 0; i < pointObjects[p][\"pointNumbers\"].length; i++, flatPointIndex++) {\n                        pointsObject[\"point_indexes\"][flatPointIndex] =\n                            pointObjects[p][\"pointNumbers\"][i];\n                        // also add xs, ys and traces so that the array doesn't get truncated later\n                        pointsObject[\"xs\"][flatPointIndex] = pointObjects[p][\"x\"];\n                        pointsObject[\"ys\"][flatPointIndex] = pointObjects[p][\"y\"];\n                        pointsObject[\"trace_indexes\"][flatPointIndex] =\n                            pointObjects[p][\"curveNumber\"];\n                    }\n                }\n                let single_trace = true;\n                for (let i = 1; i < numPointNumbers; i++) {\n                    single_trace = single_trace && (pointsObject[\"trace_indexes\"][i - 1] === pointsObject[\"trace_indexes\"][i]);\n                    if (!single_trace)\n                        break;\n                }\n                if (single_trace) {\n                    pointsObject[\"point_indexes\"].sort((function (a, b) {\n                        return a - b;\n                    }));\n                }\n            }\n            else {\n                for (var p = 0; p < numPoints; p++) {\n                    pointsObject[\"trace_indexes\"][p] = pointObjects[p][\"curveNumber\"];\n                    pointsObject[\"point_indexes\"][p] = pointObjects[p][\"pointNumber\"];\n                    pointsObject[\"xs\"][p] = pointObjects[p][\"x\"];\n                    pointsObject[\"ys\"][p] = pointObjects[p][\"y\"];\n                }\n            }\n            // Add z if present\n            var hasZ = pointObjects[0] !== undefined && pointObjects[0].hasOwnProperty(\"z\");\n            if (hasZ) {\n                pointsObject[\"zs\"] = new Array(numPoints);\n                for (p = 0; p < numPoints; p++) {\n                    pointsObject[\"zs\"][p] = pointObjects[p][\"z\"];\n                }\n            }\n            return pointsObject;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Build InputDeviceState data structure from data supplied by the\n     * plotly_click, plotly_hover, or plotly_select events\n     * @param {Object} data\n     * @returns {null|InputDeviceState}\n     */\n    buildInputDeviceStateObject(data) {\n        var event = data[\"event\"];\n        if (event === undefined) {\n            return null;\n        }\n        else {\n            /** @type {InputDeviceState} */\n            var inputDeviceState = {\n                // Keyboard modifiers\n                alt: event[\"altKey\"],\n                ctrl: event[\"ctrlKey\"],\n                meta: event[\"metaKey\"],\n                shift: event[\"shiftKey\"],\n                // Mouse buttons\n                button: event[\"button\"],\n                buttons: event[\"buttons\"],\n            };\n            return inputDeviceState;\n        }\n    }\n    /**\n     * Build Selector data structure from data supplied by the\n     * plotly_select event\n     * @param data\n     * @returns {null|Selector}\n     */\n    buildSelectorObject(data) {\n        var selectorObject;\n        if (data.hasOwnProperty(\"range\")) {\n            // Box selection\n            selectorObject = {\n                type: \"box\",\n                selector_state: {\n                    xrange: data[\"range\"][\"x\"],\n                    yrange: data[\"range\"][\"y\"],\n                },\n            };\n        }\n        else if (data.hasOwnProperty(\"lassoPoints\")) {\n            // Lasso selection\n            selectorObject = {\n                type: \"lasso\",\n                selector_state: {\n                    xs: data[\"lassoPoints\"][\"x\"],\n                    ys: data[\"lassoPoints\"][\"y\"],\n                },\n            };\n        }\n        else {\n            selectorObject = null;\n        }\n        return selectorObject;\n    }\n    /**\n     * Handle ploty_restyle events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_restyle(data) {\n        if (data === null || data === undefined) {\n            // No data to report to the Python side\n            return;\n        }\n        if (data[0] && data[0].hasOwnProperty(\"_doNotReportToPy\")) {\n            // Restyle originated on the Python side\n            return;\n        }\n        // Unpack data\n        var styleData = data[0];\n        var styleTraces = data[1];\n        // Construct restyle message to send to the Python side\n        /** @type {Js2PyRestyleMsg} */\n        var restyleMsg = {\n            style_data: styleData,\n            style_traces: styleTraces,\n            source_view_id: this.viewID,\n        };\n        this.model.set(\"_js2py_restyle\", restyleMsg);\n        this.touch();\n    }\n    /**\n     * Handle plotly_relayout events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_relayout(data) {\n        if (data === null || data === undefined) {\n            // No data to report to the Python side\n            return;\n        }\n        if (data.hasOwnProperty(\"_doNotReportToPy\")) {\n            // Relayout originated on the Python side\n            return;\n        }\n        /** @type {Js2PyRelayoutMsg} */\n        var relayoutMsg = {\n            relayout_data: data,\n            source_view_id: this.viewID,\n        };\n        this.model.set(\"_js2py_relayout\", relayoutMsg);\n        this.touch();\n    }\n    /**\n     * Handle plotly_update events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_update(data) {\n        if (data === null || data === undefined) {\n            // No data to report to the Python side\n            return;\n        }\n        if (data[\"data\"] && data[\"data\"][0].hasOwnProperty(\"_doNotReportToPy\")) {\n            // Update originated on the Python side\n            return;\n        }\n        /** @type {Js2PyUpdateMsg} */\n        var updateMsg = {\n            style_data: data[\"data\"][0],\n            style_traces: data[\"data\"][1],\n            layout_data: data[\"layout\"],\n            source_view_id: this.viewID,\n        };\n        // Log message\n        this.model.set(\"_js2py_update\", updateMsg);\n        this.touch();\n    }\n    /**\n     * Handle plotly_click events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_click(data) {\n        this._send_points_callback_message(data, \"plotly_click\");\n    }\n    /**\n     * Handle plotly_hover events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_hover(data) {\n        this._send_points_callback_message(data, \"plotly_hover\");\n    }\n    /**\n     * Handle plotly_unhover events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_unhover(data) {\n        this._send_points_callback_message(data, \"plotly_unhover\");\n    }\n    /**\n     * Handle plotly_selected events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_selected(data) {\n        this._send_points_callback_message(data, \"plotly_selected\");\n    }\n    /**\n     * Handle plotly_deselect events emitted by the Plotly.js library\n     * @param data\n     */\n    handle_plotly_deselect(data) {\n        data = {\n            points: [],\n        };\n        this._send_points_callback_message(data, \"plotly_deselect\");\n    }\n    /**\n     * Build and send a points callback message to the Python side\n     *\n     * @param {Object} data\n     *  data object as provided by the plotly_click, plotly_hover,\n     *  plotly_unhover, or plotly_selected events\n     * @param {String} event_type\n     *  Name of the triggering event. One of 'plotly_click',\n     *  'plotly_hover', 'plotly_unhover', or 'plotly_selected'\n     * @private\n     */\n    _send_points_callback_message(data, event_type) {\n        if (data === null || data === undefined) {\n            // No data to report to the Python side\n            return;\n        }\n        /** @type {Js2PyPointsCallbackMsg} */\n        var pointsMsg = {\n            event_type: event_type,\n            points: this.buildPointsObject(data),\n            device_state: this.buildInputDeviceStateObject(data),\n            selector: this.buildSelectorObject(data),\n        };\n        if (pointsMsg[\"points\"] !== null && pointsMsg[\"points\"] !== undefined) {\n            this.model.set(\"_js2py_pointsCallback\", pointsMsg);\n            this.touch();\n        }\n    }\n    /**\n     * Stub for future handling of plotly_doubleclick\n     * @param data\n     */\n    handle_plotly_doubleclick(data) { }\n    /**\n     * Handle Plotly.addTraces request\n     */\n    do_addTraces() {\n        /** @type {Py2JsAddTracesMsg} */\n        var msgData = this.model.get(\"_py2js_addTraces\");\n        if (msgData !== null) {\n            var that = this;\n            Plotly.addTraces(this.el, msgData.trace_data).then(function () {\n                // ### Send trace deltas ###\n                that._sendTraceDeltas(msgData.trace_edit_id);\n                // ### Send layout delta ###\n                var layout_edit_id = msgData.layout_edit_id;\n                that._sendLayoutDelta(layout_edit_id);\n            });\n        }\n    }\n    /**\n     * Handle Plotly.deleteTraces request\n     */\n    do_deleteTraces() {\n        /** @type {Py2JsDeleteTracesMsg} */\n        var msgData = this.model.get(\"_py2js_deleteTraces\");\n        if (msgData !== null) {\n            var delete_inds = msgData.delete_inds;\n            var that = this;\n            Plotly.deleteTraces(this.el, delete_inds).then(function () {\n                // ### Send trace deltas ###\n                var trace_edit_id = msgData.trace_edit_id;\n                that._sendTraceDeltas(trace_edit_id);\n                // ### Send layout delta ###\n                var layout_edit_id = msgData.layout_edit_id;\n                that._sendLayoutDelta(layout_edit_id);\n            });\n        }\n    }\n    /**\n     * Handle Plotly.moveTraces request\n     */\n    do_moveTraces() {\n        /** @type {Py2JsMoveTracesMsg} */\n        var msgData = this.model.get(\"_py2js_moveTraces\");\n        if (msgData !== null) {\n            // Unpack message\n            var currentInds = msgData.current_trace_inds;\n            var newInds = msgData.new_trace_inds;\n            // Check if the new trace indexes are actually different than\n            // the current indexes\n            var inds_equal = _.isEqual(currentInds, newInds);\n            if (!inds_equal) {\n                Plotly.moveTraces(this.el, currentInds, newInds);\n            }\n        }\n    }\n    /**\n     * Handle Plotly.restyle request\n     */\n    do_restyle() {\n        /** @type {Py2JsRestyleMsg} */\n        var msgData = this.model.get(\"_py2js_restyle\");\n        if (msgData !== null) {\n            var restyleData = msgData.restyle_data;\n            var traceIndexes = this.model._normalize_trace_indexes(msgData.restyle_traces);\n            restyleData[\"_doNotReportToPy\"] = true;\n            Plotly.restyle(this.el, restyleData, traceIndexes);\n            // ### Send trace deltas ###\n            // We create an array of deltas corresponding to the restyled\n            // traces.\n            this._sendTraceDeltas(msgData.trace_edit_id);\n            // ### Send layout delta ###\n            var layout_edit_id = msgData.layout_edit_id;\n            this._sendLayoutDelta(layout_edit_id);\n        }\n    }\n    /**\n     * Handle Plotly.relayout request\n     */\n    do_relayout() {\n        /** @type {Py2JsRelayoutMsg} */\n        var msgData = this.model.get(\"_py2js_relayout\");\n        if (msgData !== null) {\n            if (msgData.source_view_id !== this.viewID) {\n                var relayoutData = msgData.relayout_data;\n                relayoutData[\"_doNotReportToPy\"] = true;\n                Plotly.relayout(this.el, msgData.relayout_data);\n            }\n            // ### Send layout delta ###\n            var layout_edit_id = msgData.layout_edit_id;\n            this._sendLayoutDelta(layout_edit_id);\n        }\n    }\n    /**\n     * Handle Plotly.update request\n     */\n    do_update() {\n        /** @type {Py2JsUpdateMsg} */\n        var msgData = this.model.get(\"_py2js_update\");\n        if (msgData !== null) {\n            var style = msgData.style_data || {};\n            var layout = msgData.layout_data || {};\n            var traceIndexes = this.model._normalize_trace_indexes(msgData.style_traces);\n            style[\"_doNotReportToPy\"] = true;\n            Plotly.update(this.el, style, layout, traceIndexes);\n            // ### Send trace deltas ###\n            // We create an array of deltas corresponding to the updated\n            // traces.\n            this._sendTraceDeltas(msgData.trace_edit_id);\n            // ### Send layout delta ###\n            var layout_edit_id = msgData.layout_edit_id;\n            this._sendLayoutDelta(layout_edit_id);\n        }\n    }\n    /**\n     * Handle Plotly.animate request\n     */\n    do_animate() {\n        /** @type {Py2JsAnimateMsg} */\n        var msgData = this.model.get(\"_py2js_animate\");\n        if (msgData !== null) {\n            // Unpack params\n            // var animationData = msgData[0];\n            var animationOpts = msgData.animation_opts;\n            var styles = msgData.style_data;\n            var layout = msgData.layout_data;\n            var traceIndexes = this.model._normalize_trace_indexes(msgData.style_traces);\n            var animationData = {\n                data: styles,\n                layout: layout,\n                traces: traceIndexes,\n            };\n            animationData[\"_doNotReportToPy\"] = true;\n            var that = this;\n            // @ts-ignore\n            Plotly.animate(this.el, animationData, animationOpts).then(function () {\n                // ### Send trace deltas ###\n                // We create an array of deltas corresponding to the\n                // animated traces.\n                that._sendTraceDeltas(msgData.trace_edit_id);\n                // ### Send layout delta ###\n                var layout_edit_id = msgData.layout_edit_id;\n                that._sendLayoutDelta(layout_edit_id);\n            });\n        }\n    }\n    /**\n     * Construct layout delta object and send layoutDelta message to the\n     * Python side\n     *\n     * @param layout_edit_id\n     *  Edit ID of message that triggered the creation of the layout delta\n     * @private\n     */\n    _sendLayoutDelta(layout_edit_id) {\n        // ### Handle layout delta ###\n        var layout_delta = createDeltaObject(this.getFullLayout(), this.model.get(\"_layout\"));\n        /** @type{Js2PyLayoutDeltaMsg} */\n        var layoutDeltaMsg = {\n            layout_delta: layout_delta,\n            layout_edit_id: layout_edit_id,\n        };\n        this.model.set(\"_js2py_layoutDelta\", layoutDeltaMsg);\n        this.touch();\n    }\n    /**\n     * Construct trace deltas array for the requested trace indexes and\n     * send traceDeltas message to the Python side\n     *  Array of indexes of traces for which to compute deltas\n     * @param trace_edit_id\n     *  Edit ID of message that triggered the creation of trace deltas\n     * @private\n     */\n    _sendTraceDeltas(trace_edit_id) {\n        var trace_data = this.model.get(\"_data\");\n        var traceIndexes = _.range(trace_data.length);\n        var trace_deltas = new Array(traceIndexes.length);\n        var fullData = this.getFullData();\n        for (var i = 0; i < traceIndexes.length; i++) {\n            var traceInd = traceIndexes[i];\n            trace_deltas[i] = createDeltaObject(fullData[traceInd], trace_data[traceInd]);\n        }\n        /** @type{Js2PyTraceDeltasMsg} */\n        var traceDeltasMsg = {\n            trace_deltas: trace_deltas,\n            trace_edit_id: trace_edit_id,\n        };\n        this.model.set(\"_js2py_traceDeltas\", traceDeltasMsg);\n        this.touch();\n    }\n}\n// Serialization\n/**\n * Create a mapping from numpy dtype strings to corresponding typed array\n * constructors\n */\nconst numpy_dtype_to_typedarray_type = {\n    int8: Int8Array,\n    int16: Int16Array,\n    int32: Int32Array,\n    uint8: Uint8Array,\n    uint16: Uint16Array,\n    uint32: Uint32Array,\n    float32: Float32Array,\n    float64: Float64Array,\n};\nfunction serializeTypedArray(v) {\n    var numpyType;\n    if (v instanceof Int8Array) {\n        numpyType = \"int8\";\n    }\n    else if (v instanceof Int16Array) {\n        numpyType = \"int16\";\n    }\n    else if (v instanceof Int32Array) {\n        numpyType = \"int32\";\n    }\n    else if (v instanceof Uint8Array) {\n        numpyType = \"uint8\";\n    }\n    else if (v instanceof Uint16Array) {\n        numpyType = \"uint16\";\n    }\n    else if (v instanceof Uint32Array) {\n        numpyType = \"uint32\";\n    }\n    else if (v instanceof Float32Array) {\n        numpyType = \"float32\";\n    }\n    else if (v instanceof Float64Array) {\n        numpyType = \"float64\";\n    }\n    else {\n        // Don't understand it, return as is\n        return v;\n    }\n    var res = {\n        dtype: numpyType,\n        shape: [v.length],\n        value: v.buffer,\n    };\n    return res;\n}\n/**\n * ipywidget JavaScript -> Python serializer\n */\nfunction js2py_serializer(v, widgetManager) {\n    var res;\n    if (_.isTypedArray(v)) {\n        res = serializeTypedArray(v);\n    }\n    else if (Array.isArray(v)) {\n        // Serialize array elements recursively\n        res = new Array(v.length);\n        for (var i = 0; i < v.length; i++) {\n            res[i] = js2py_serializer(v[i]);\n        }\n    }\n    else if (_.isPlainObject(v)) {\n        // Serialize object properties recursively\n        res = {};\n        for (var p in v) {\n            if (v.hasOwnProperty(p)) {\n                res[p] = js2py_serializer(v[p]);\n            }\n        }\n    }\n    else if (v === undefined) {\n        // Translate undefined into '_undefined_' sentinal string. The\n        // Python _js_to_py deserializer will convert this into an\n        // Undefined object\n        res = \"_undefined_\";\n    }\n    else {\n        // Primitive value to transfer directly\n        res = v;\n    }\n    return res;\n}\n/**\n * ipywidget Python -> Javascript deserializer\n */\nfunction py2js_deserializer(v, widgetManager) {\n    var res;\n    if (Array.isArray(v)) {\n        // Deserialize array elements recursively\n        res = new Array(v.length);\n        for (var i = 0; i < v.length; i++) {\n            res[i] = py2js_deserializer(v[i]);\n        }\n    }\n    else if (_.isPlainObject(v)) {\n        if ((_.has(v, \"value\") || _.has(v, \"buffer\")) &&\n            _.has(v, \"dtype\") &&\n            _.has(v, \"shape\")) {\n            // Deserialize special buffer/dtype/shape objects into typed arrays\n            // These objects correspond to numpy arrays on the Python side\n            //\n            // Note plotly.py<=3.1.1 called the buffer object `buffer`\n            // This was renamed `value` in 3.2 to work around a naming conflict\n            // when saving widget state to a notebook.\n            // @ts-ignore\n            var typedarray_type = numpy_dtype_to_typedarray_type[v.dtype];\n            var buffer = _.has(v, \"value\") ? v.value.buffer : v.buffer.buffer;\n            res = new typedarray_type(buffer);\n        }\n        else {\n            // Deserialize object properties recursively\n            res = {};\n            for (var p in v) {\n                if (v.hasOwnProperty(p)) {\n                    res[p] = py2js_deserializer(v[p]);\n                }\n            }\n        }\n    }\n    else if (v === \"_undefined_\") {\n        // Convert the _undefined_ sentinal into undefined\n        res = undefined;\n    }\n    else {\n        // Accept primitive value directly\n        res = v;\n    }\n    return res;\n}\n/**\n * Return whether the input value is a typed array\n * @param potentialTypedArray\n *  Value to examine\n * @returns {boolean}\n */\nfunction isTypedArray(potentialTypedArray) {\n    return (ArrayBuffer.isView(potentialTypedArray) &&\n        !(potentialTypedArray instanceof DataView));\n}\n/**\n * Customizer for use with lodash's mergeWith function\n *\n * The customizer ensures that typed arrays are not converted into standard\n * arrays during the recursive merge\n *\n * See: https://lodash.com/docs/latest#mergeWith\n */\nfunction fullMergeCustomizer(objValue, srcValue, key) {\n    if (key[0] === \"_\") {\n        // Don't recurse into private properties\n        return null;\n    }\n    else if (isTypedArray(srcValue)) {\n        // Return typed arrays directly, don't recurse inside\n        return srcValue;\n    }\n}\n/**\n * Reform a Plotly.relayout like operation on an input object\n *\n * @param {Object} parentObj\n *  The object that the relayout operation should be applied to\n * @param {Object} relayoutData\n *  An relayout object as accepted by Plotly.relayout\n *\n *  Examples:\n *      var d = {foo {bar [5, 10]}};\n *      performRelayoutLike(d, {'foo.bar': [0, 1]});\n *      d -> {foo: {bar: [0, 1]}}\n *\n *      var d = {foo {bar [5, 10]}};\n *      performRelayoutLike(d, {'baz': 34});\n *      d -> {foo: {bar: [5, 10]}, baz: 34}\n *\n *      var d = {foo: {bar: [5, 10]};\n *      performRelayoutLike(d, {'foo.baz[1]': 17});\n *      d -> {foo: {bar: [5, 17]}}\n *\n */\nfunction performRelayoutLike(parentObj, relayoutData) {\n    // Perform a relayout style operation on a given parent object\n    for (var rawKey in relayoutData) {\n        if (!relayoutData.hasOwnProperty(rawKey)) {\n            continue;\n        }\n        // Extract value for this key\n        var relayoutVal = relayoutData[rawKey];\n        // Set property value\n        if (relayoutVal === null) {\n            _.unset(parentObj, rawKey);\n        }\n        else {\n            _.set(parentObj, rawKey, relayoutVal);\n        }\n    }\n}\n/**\n * Perform a Plotly.restyle like operation on an input object array\n *\n * @param {Array.<Object>} parentArray\n *  The object that the restyle operation should be applied to\n * @param {Object} restyleData\n *  A restyle object as accepted by Plotly.restyle\n * @param {Array.<Number>} restyleTraces\n *  Array of indexes of the traces that the resytle operation applies to\n *\n *  Examples:\n *      var d = [{foo: {bar: 1}}, {}, {}]\n *      performRestyleLike(d, {'foo.bar': 2}, [0])\n *      d -> [{foo: {bar: 2}}, {}, {}]\n *\n *      var d = [{foo: {bar: 1}}, {}, {}]\n *      performRestyleLike(d, {'foo.bar': 2}, [0, 1, 2])\n *      d -> [{foo: {bar: 2}}, {foo: {bar: 2}}, {foo: {bar: 2}}]\n *\n *      var d = [{foo: {bar: 1}}, {}, {}]\n *      performRestyleLike(d, {'foo.bar': [2, 3, 4]}, [0, 1, 2])\n *      d -> [{foo: {bar: 2}}, {foo: {bar: 3}}, {foo: {bar: 4}}]\n *\n */\nfunction performRestyleLike(parentArray, restyleData, restyleTraces) {\n    // Loop over the properties of restyleData\n    for (var rawKey in restyleData) {\n        if (!restyleData.hasOwnProperty(rawKey)) {\n            continue;\n        }\n        // Extract value for property and normalize into a value list\n        var valArray = restyleData[rawKey];\n        if (!Array.isArray(valArray)) {\n            valArray = [valArray];\n        }\n        // Loop over the indexes of the traces being restyled\n        for (var i = 0; i < restyleTraces.length; i++) {\n            // Get trace object\n            var traceInd = restyleTraces[i];\n            var trace = parentArray[traceInd];\n            // Extract value for this trace\n            var singleVal = valArray[i % valArray.length];\n            // Set property value\n            if (singleVal === null) {\n                _.unset(trace, rawKey);\n            }\n            else if (singleVal !== undefined) {\n                _.set(trace, rawKey, singleVal);\n            }\n        }\n    }\n}\n/**\n * Perform a Plotly.moveTraces like operation on an input object array\n * @param parentArray\n *  The object that the moveTraces operation should be applied to\n * @param currentInds\n *  Array of the current indexes of traces to be moved\n * @param newInds\n *  Array of the new indexes that traces selected by currentInds should be\n *  moved to.\n *\n *  Examples:\n *      var d = [{foo: 0}, {foo: 1}, {foo: 2}]\n *      performMoveTracesLike(d, [0, 1], [2, 0])\n *      d -> [{foo: 1}, {foo: 2}, {foo: 0}]\n *\n *      var d = [{foo: 0}, {foo: 1}, {foo: 2}]\n *      performMoveTracesLike(d, [0, 2], [1, 2])\n *      d -> [{foo: 1}, {foo: 0}, {foo: 2}]\n */\nfunction performMoveTracesLike(parentArray, currentInds, newInds) {\n    // ### Remove by currentInds in reverse order ###\n    var movingTracesData = [];\n    for (var ci = currentInds.length - 1; ci >= 0; ci--) {\n        // Insert moving parentArray at beginning of the list\n        movingTracesData.splice(0, 0, parentArray[currentInds[ci]]);\n        parentArray.splice(currentInds[ci], 1);\n    }\n    // ### Sort newInds and movingTracesData by newInds ###\n    var newIndexSortedArrays = _(newInds)\n        .zip(movingTracesData)\n        .sortBy(0)\n        .unzip()\n        .value();\n    newInds = newIndexSortedArrays[0];\n    movingTracesData = newIndexSortedArrays[1];\n    // ### Insert by newInds in forward order ###\n    for (var ni = 0; ni < newInds.length; ni++) {\n        parentArray.splice(newInds[ni], 0, movingTracesData[ni]);\n    }\n}\n/**\n * Remove nested properties from a parent object\n * @param {Object} parentObj\n *  Parent object from which properties or nested properties should be removed\n * @param {Array.<Array.<Number|String>>} keyPaths\n *  Array of key paths for properties that should be removed. Each key path\n *  is an array of properties names or array indexes that reference a\n *  property to be removed\n *\n *  Examples:\n *      var d = {foo: [{bar: 0}, {bar: 1}], baz: 32}\n *      performRemoveProps(d, ['baz'])\n *      d -> {foo: [{bar: 0}, {bar: 1}]}\n *\n *      var d = {foo: [{bar: 0}, {bar: 1}], baz: 32}\n *      performRemoveProps(d, ['foo[1].bar', 'baz'])\n *      d -> {foo: [{bar: 0}, {}]}\n *\n */\nfunction performRemoveProps(parentObj, keyPaths) {\n    for (var i = 0; i < keyPaths.length; i++) {\n        var keyPath = keyPaths[i];\n        _.unset(parentObj, keyPath);\n    }\n}\n/**\n * Return object that contains all properties in fullObj that are not\n * identical to the corresponding properties in removeObj\n *\n * Properties of fullObj and removeObj may be objects or arrays of objects\n *\n * Returned object is a deep clone of the properties of the input objects\n *\n * @param {Object} fullObj\n * @param {Object} removeObj\n *\n *  Examples:\n *      var fullD = {foo: [{bar: 0}, {bar: 1}], baz: 32}\n *      var removeD = {baz: 32}\n *      createDeltaObject(fullD, removeD)\n *          -> {foo: [{bar: 0}, {bar: 1}]}\n *\n *      var fullD = {foo: [{bar: 0}, {bar: 1}], baz: 32}\n *      var removeD = {baz: 45}\n *      createDeltaObject(fullD, removeD)\n *          -> {foo: [{bar: 0}, {bar: 1}], baz: 32}\n *\n *      var fullD = {foo: [{bar: 0}, {bar: 1}], baz: 32}\n *      var removeD = {foo: [{bar: 0}, {bar: 1}]}\n *      createDeltaObject(fullD, removeD)\n *          -> {baz: 32}\n *\n */\nfunction createDeltaObject(fullObj, removeObj) {\n    // Initialize result as object or array\n    var res;\n    if (Array.isArray(fullObj)) {\n        res = new Array(fullObj.length);\n    }\n    else {\n        res = {};\n    }\n    // Initialize removeObj to empty object if not specified\n    if (removeObj === null || removeObj === undefined) {\n        removeObj = {};\n    }\n    // Iterate over object properties or array indices\n    for (var p in fullObj) {\n        if (p[0] !== \"_\" && // Don't consider private properties\n            fullObj.hasOwnProperty(p) && // Exclude parent properties\n            fullObj[p] !== null // Exclude cases where fullObj doesn't\n        // have the property\n        ) {\n            // Compute object equality\n            var props_equal;\n            props_equal = _.isEqual(fullObj[p], removeObj[p]);\n            // Perform recursive comparison if props are not equal\n            if (!props_equal || p === \"uid\") {\n                // Let uids through\n                // property has non-null value in fullObj that doesn't\n                // match the value in removeObj\n                var fullVal = fullObj[p];\n                if (removeObj.hasOwnProperty(p) && typeof fullVal === \"object\") {\n                    // Recurse over object properties\n                    if (Array.isArray(fullVal)) {\n                        if (fullVal.length > 0 && typeof fullVal[0] === \"object\") {\n                            // We have an object array\n                            res[p] = new Array(fullVal.length);\n                            for (var i = 0; i < fullVal.length; i++) {\n                                if (!Array.isArray(removeObj[p]) || removeObj[p].length <= i) {\n                                    res[p][i] = fullVal[i];\n                                }\n                                else {\n                                    res[p][i] = createDeltaObject(fullVal[i], removeObj[p][i]);\n                                }\n                            }\n                        }\n                        else {\n                            // We have a primitive array or typed array\n                            res[p] = fullVal;\n                        }\n                    }\n                    else {\n                        // object\n                        var full_obj = createDeltaObject(fullVal, removeObj[p]);\n                        if (Object.keys(full_obj).length > 0) {\n                            // new object is not empty\n                            res[p] = full_obj;\n                        }\n                    }\n                }\n                else if (typeof fullVal === \"object\" && !Array.isArray(fullVal)) {\n                    // Return 'clone' of fullVal\n                    // We don't use a standard clone method so that we keep\n                    // the special case handling of this method\n                    res[p] = createDeltaObject(fullVal, {});\n                }\n                else if (fullVal !== undefined && typeof fullVal !== \"function\") {\n                    // No recursion necessary, Just keep value from fullObj.\n                    // But skip values with function type\n                    res[p] = fullVal;\n                }\n            }\n        }\n    }\n    return res;\n}\nfunction randstr(existing, bits, base, _recursion) {\n    if (!base)\n        base = 16;\n    if (bits === undefined)\n        bits = 24;\n    if (bits <= 0)\n        return \"0\";\n    var digits = Math.log(Math.pow(2, bits)) / Math.log(base);\n    var res = \"\";\n    var i, b, x;\n    for (i = 2; digits === Infinity; i *= 2) {\n        digits = (Math.log(Math.pow(2, bits / i)) / Math.log(base)) * i;\n    }\n    var rem = digits - Math.floor(digits);\n    for (i = 0; i < Math.floor(digits); i++) {\n        x = Math.floor(Math.random() * base).toString(base);\n        res = x + res;\n    }\n    if (rem) {\n        b = Math.pow(base, rem);\n        x = Math.floor(Math.random() * b).toString(base);\n        res = x + res;\n    }\n    var parsed = parseInt(res, base);\n    if ((existing && existing[res]) ||\n        (parsed !== Infinity && parsed >= Math.pow(2, bits))) {\n        if (_recursion > 10) {\n            console.warn(\"randstr failed uniqueness\");\n            return res;\n        }\n        return randstr(existing, bits, base, (_recursion || 0) + 1);\n    }\n    else\n        return res;\n}\n"],"sourceRoot":""}